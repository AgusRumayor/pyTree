# Python 2/3 Tree Implementation
#
# Copyright (C) 2011
# Original: Brett Alistair Kromkamp - brettkromkamp@gmail.com
# Edited by: Xiaming Chen - chenxm35@gmail.com
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this list
# of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# Neither the name of the copyright holder nor the names of the contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Example usage
	tree = Tree()
	tree.create_node("Harry", "harry")  # root node
	tree.create_node("Jane", "jane", parent = "harry")
	tree.create_node("Bill", "bill", parent = "harry")
	tree.create_node("Joe", "joe", parent = "jane")
	tree.create_node("Diane", "diane", parent = "jane")
	tree.create_node("George", "george", parent = "diane")
	tree.create_node("Mary", "mary", parent = "diane")
	tree.create_node("Jill", "jill", parent = "george")
	tree.create_node("Carol", "carol", parent = "jill")
	tree.create_node("Grace", "grace", parent = "bill")
	tree.create_node("Mark", "mark", parent = "jane")

	print("="*80)
	tree.show()
	
	print("="*80)
	for node in tree.expand_tree(mode=_DEPTH):
		print tree[node].name
		
	print("="*80)
	for node in tree.expand_tree(filter = lambda x: x != 'george', mode=_DEPTH):
		print tree[node].name
		
	print("="*80)
	sub_t = tree.subtree('diane')
	sub_t.show()
	
	print("="*80)
	print tree.is_branch('diane')

	print("="*80)
	new_tree = Tree()
	new_tree.create_node("1", "1")  # root node
	new_tree.create_node("2", "2", parent = "1")
	new_tree.create_node("3", "3", parent = "1")
	tree.paste('jill', new_tree)
	tree.show()

	print("="*80)
	tree.remove_node('1')
	tree.show()

	print("="*80)
	tree.move_node('jill', 'harry')
	tree.show()
	
Results:

================================================================================
Harry [harry]
('+', 'Jane [jane]')
('++', 'Joe [joe]')
('++', 'Diane [diane]')
('+++', 'George [george]')
('++++', 'Jill [jill]')
('+++++', 'Carol [carol]')
('+++', 'Mary [mary]')
('++', 'Mark [mark]')
('+', 'Bill [bill]')
('++', 'Grace [grace]')
================================================================================
Harry
Jane
Joe
Diane
George
Jill
Carol
Mary
Mark
Bill
Grace
================================================================================
Harry
Jane
Joe
Diane
Mary
Mark
Bill
Grace
================================================================================
Diane [diane]
('+', 'George [george]')
('++', 'Jill [jill]')
('+++', 'Carol [carol]')
('+', 'Mary [mary]')
================================================================================
['george', 'mary']
================================================================================
['harry', 'jane', 'bill', 'joe', 'diane', 'george', 'mary', 'jill', 'carol', 'grace', 'mark', '1', '2', '3']
Harry [harry]
('+', 'Jane [jane]')
('++', 'Joe [joe]')
('++', 'Diane [diane]')
('+++', 'George [george]')
('++++', 'Jill [jill]')
('+++++', 'Carol [carol]')
('+++++', '1 [1]')
('++++++', '2 [2]')
('++++++', '3 [3]')
('+++', 'Mary [mary]')
('++', 'Mark [mark]')
('+', 'Bill [bill]')
('++', 'Grace [grace]')
================================================================================
Harry [harry]
('+', 'Jane [jane]')
('++', 'Joe [joe]')
('++', 'Diane [diane]')
('+++', 'George [george]')
('++++', 'Jill [jill]')
('+++++', 'Carol [carol]')
('+++', 'Mary [mary]')
('++', 'Mark [mark]')
('+', 'Bill [bill]')
('++', 'Grace [grace]')
================================================================================
Harry [harry]
('+', 'Jane [jane]')
('++', 'Joe [joe]')
('++', 'Diane [diane]')
('+++', 'George [george]')
('+++', 'Mary [mary]')
('++', 'Mark [mark]')
('+', 'Bill [bill]')
('++', 'Grace [grace]')
('+', 'Jill [jill]')
('++', 'Carol [carol]')